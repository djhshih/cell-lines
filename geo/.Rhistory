gse_id <- gse_ids[j]
if (!is.na(exp_type) && exp_type != "" && !is.na(gse_id)) {
geo[i, exp_type] <- ifelse(is.na(geo[i, exp_type]), gse_id, paste(geo[i, exp_type], gse_id, sep = "|"))
}
}
}
}
# Print the updated data frame
print(geo)
# Load the required library
library(GEOquery)
# Sample data frame named 'geo'
geo <- data.frame(
id = c("Cell1", "Cell2", "Cell3"),
geo = c("GSM1|GSM2|GSM3", "", "GSM4|GSM5|GSM6"),
stringsAsFactors = FALSE
)
# Function to get GSE IDs and Experiment Types from a string of GSM IDs
get_gse_and_experiment_type <- function(gsm_string) {
if (gsm_string == "") {
return(list(gse_ids = NA, experiment_types = NA, gsm_ids = NA))  # Return NA for empty cells
}
gsm_ids <- unlist(strsplit(gsm_string, "|", fixed = TRUE))
gse_ids <- c()
experiment_types <- c()
gsm_list <- c()
for (gsm_id in gsm_ids) {
gsm_metadata <- getGEO(gsm_id, AnnotGPL = FALSE, getGPL = FALSE)
if (is.list(gsm_metadata)) {
gsm_metadata <- gsm_metadata[[1]]
}
# Extract relevant information from the GSM metadata
gse_id <- gsm_metadata@header$series_id
experiment_type <- gsm_metadata@header$type
gse_ids <- c(gse_ids, gse_id)
experiment_types <- c(experiment_types, experiment_type)
gsm_list <- c(gsm_list, gsm_id)
}
return(list(gse_ids = unique(gse_ids), experiment_types = experiment_types, gsm_ids = gsm_list))
}
# Apply the function to each cell in the "geo" column
results <- lapply(geo$geo, get_gse_and_experiment_type)
# Split the results into separate lists for GSE IDs and experiment types
gse_list <- lapply(results, function(x) x$gse_ids)
experiment_type_list <- lapply(results, function(x) x$experiment_types)
gsm_list <- lapply(results, function(x) x$gsm_ids)
# Replace GSM numbers in the "geo" column with GSE IDs
geo$geo <- sapply(gse_list, function(x) paste(x, collapse = "|"))
# Filter out any NA or empty experiment types
unique_experiment_types <- unique(unlist(experiment_type_list))
unique_experiment_types <- unique_experiment_types[!is.na(unique_experiment_types) & unique_experiment_types != ""]
# Initialize the new columns in the data frame
for (exp_type in unique_experiment_types) {
geo[[exp_type]] <- NA
}
# Fill in the GSM numbers under the respective experiment type columns
for (i in seq_along(geo$geo)) {
exp_types <- experiment_type_list[[i]]
if (!all(is.na(exp_types))) {
for (j in seq_along(exp_types)) {
exp_type <- exp_types[j]
gsm_id <- gsm_list[[i]][j]
if (!is.na(exp_type) && exp_type != "" && !is.na(gsm_id)) {
geo[i, exp_type] <- ifelse(is.na(geo[i, exp_type]), gsm_id, paste(geo[i, exp_type], gsm_id, sep = "|"))
}
}
}
}
# Print the updated data frame
print(geo)
# Sample data frame named 'geo'
geo <- h.cell[ , c("id", "geo")]
# Function to get GSE IDs and Experiment Types from a string of GSM IDs
get_gse_and_experiment_type <- function(gsm_string) {
if (gsm_string == "") {
return(list(gse_ids = NA, experiment_types = NA, gsm_ids = NA))  # Return NA for empty cells
}
gsm_ids <- unlist(strsplit(gsm_string, "|", fixed = TRUE))
gse_ids <- c()
experiment_types <- c()
gsm_list <- c()
for (gsm_id in gsm_ids) {
gsm_metadata <- getGEO(gsm_id, AnnotGPL = FALSE, getGPL = FALSE)
if (is.list(gsm_metadata)) {
gsm_metadata <- gsm_metadata[[1]]
}
# Extract relevant information from the GSM metadata
gse_id <- gsm_metadata@header$series_id
experiment_type <- gsm_metadata@header$type
gse_ids <- c(gse_ids, gse_id)
experiment_types <- c(experiment_types, experiment_type)
gsm_list <- c(gsm_list, gsm_id)
}
return(list(gse_ids = unique(gse_ids), experiment_types = experiment_types, gsm_ids = gsm_list))
}
# Apply the function to each cell in the "geo" column
results <- lapply(geo$geo, get_gse_and_experiment_type)
# Load the required library
library(GEOquery)
# Sample data frame named 'geo'
geo <- data.frame(
id = c("Cell1", "Cell2", "Cell3"),
geo = c("GSM1|GSM2|GSM3", "", "GSM4|GSM5|GSM6"),
stringsAsFactors = FALSE
)
# Function to get GSE IDs and Experiment Types from a string of GSM IDs
get_gse_and_experiment_type <- function(gsm_string) {
if (gsm_string == "") {
return(list(gse_ids = NA, experiment_types = NA, gsm_ids = NA))  # Return NA for empty cells
}
gsm_ids <- unlist(strsplit(gsm_string, "|", fixed = TRUE))
gse_ids <- c()
experiment_types <- c()
gsm_list <- c()
for (gsm_id in gsm_ids) {
gsm_metadata <- getGEO(gsm_id, AnnotGPL = FALSE, getGPL = FALSE, parseGSEMatrix = FALSE)
if (is.list(gsm_metadata)) {
gsm_metadata <- gsm_metadata[[1]]
}
# Extract relevant information from the GSM metadata
gse_id <- gsm_metadata@header$series_id
experiment_type <- gsm_metadata@header$type
gse_ids <- c(gse_ids, gse_id)
experiment_types <- c(experiment_types, experiment_type)
gsm_list <- c(gsm_list, gsm_id)
}
return(list(gse_ids = unique(gse_ids), experiment_types = experiment_types, gsm_ids = gsm_list))
}
# Apply the function to each cell in the "geo" column
results <- lapply(geo$geo, get_gse_and_experiment_type)
# Split the results into separate lists for GSE IDs, experiment types, and GSM IDs
gse_list <- lapply(results, function(x) x$gse_ids)
experiment_type_list <- lapply(results, function(x) x$experiment_types)
for (gsm_id in gsm_ids) {
gsm_metadata <- getGEO(gsm_id, AnnotGPL = FALSE, getGPL = FALSE, parseGSEMatrix = FALSE)
if (is.list(gsm_metadata)) {
gsm_metadata <- gsm_metadata[[1]]
}
# Extract relevant information from the GSM metadata
gse_id <- gsm_metadata@header$series_id
experiment_type <- gsm_metadata@header$type
gse_ids <- c(gse_ids, gse_id)
experiment_types <- c(experiment_types, experiment_type)
gsm_list <- c(gsm_list, gsm_id)
}
# Load the required library
library(GEOquery)
# Sample data frame named 'geo'
geo <- data.frame(
id = c("Cell1", "Cell2", "Cell3"),
geo = c("GSM1|GSM2|GSM3", "", "GSM4|GSM5|GSM6"),
stringsAsFactors = FALSE
)
# Function to get GSE IDs and Experiment Types from a string of GSM IDs
get_gse_and_experiment_type <- function(gsm_string) {
if (gsm_string == "") {
return(list(gse_ids = NA, experiment_types = NA, gsm_ids = NA))  # Return NA for empty cells
}
gsm_ids <- unlist(strsplit(gsm_string, "|", fixed = TRUE))
gse_ids <- c()
experiment_types <- c()
gsm_list <- c()
for (gsm_id in gsm_ids) {
gsm_metadata <- getGEO(gsm_id, AnnotGPL = FALSE, getGPL = FALSE, parseGSEMatrix = FALSE)
if (is.list(gsm_metadata)) {
gsm_metadata <- gsm_metadata[[1]]
}
# Extract relevant information from the GSM metadata
gse_id <- gsm_metadata@header$series_id
experiment_type <- gsm_metadata@header$type
gse_ids <- c(gse_ids, gse_id)
experiment_types <- c(experiment_types, experiment_type)
gsm_list <- c(gsm_list, gsm_id)
}
return(list(gse_ids = unique(gse_ids), experiment_types = experiment_types, gsm_ids = gsm_list))
}
# Apply the function to each cell in the "geo" column
results <- lapply(geo$geo, get_gse_and_experiment_type)
# Load the required library
library(GEOquery)
# Sample data frame named 'geo'
geo <- data.frame(
id = c("Cell1", "Cell2", "Cell3"),
geo = c("GSM1|GSM2|GSM3", "", "GSM4|GSM5|GSM6"),
stringsAsFactors = FALSE
)
# Function to get GSE IDs and Experiment Types from a string of GSM IDs
get_gse_and_experiment_type <- function(gsm_string) {
if (gsm_string == "") {
return(list(gse_ids = NA, experiment_types = NA, gsm_ids = NA))  # Return NA for empty cells
}
gsm_ids <- unlist(strsplit(gsm_string, "|", fixed = TRUE))
gse_ids <- c()
experiment_types <- c()
gsm_list <- c()
for (gsm_id in gsm_ids) {
gsm_metadata <- getGEO(gsm_id, AnnotGPL = FALSE, getGPL = FALSE, parseGSEMatrix = FALSE)
if (is.list(gsm_metadata)) {
gsm_metadata <- gsm_metadata[[1]]
}
# Extract relevant information from the GSM metadata
gse_id <- gsm_metadata@header$series_id
experiment_type <- gsm_metadata@header$type
gse_ids <- c(gse_ids, gse_id)
experiment_types <- c(experiment_types, experiment_type)
gsm_list <- c(gsm_list, gsm_id)
}
return(list(gse_ids = unique(gse_ids), experiment_types = experiment_types, gsm_ids = gsm_list))
}
# Apply the function to each cell in the "geo" column
results <- lapply(geo$geo, get_gse_and_experiment_type)
# Load the required library
library(GEOquery)
# Sample data frame named 'geo'
geo <- data.frame(
id = c("Cell1", "Cell2", "Cell3"),
geo = c("GSM1|GSM2|GSM3", "", "GSM4|GSM5|GSM6"),
stringsAsFactors = FALSE
)
# Function to get GSE IDs and Experiment Types from a string of GSM IDs
get_gse_and_experiment_type <- function(gsm_string) {
if (gsm_string == "") {
return(list(gse_ids = NA, experiment_types = NA, gsm_ids = NA))  # Return NA for empty cells
}
gsm_ids <- unlist(strsplit(gsm_string, "|", fixed = TRUE))
gse_ids <- c()
experiment_types <- c()
gsm_list <- c()
for (gsm_id in gsm_ids) {
gsm_metadata <- getGEO(gsm_id, AnnotGPL = FALSE, getGPL = FALSE)
if (is.list(gsm_metadata)) {
gsm_metadata <- gsm_metadata[[1]]
}
# Extract relevant information from the GSM metadata
gse_id <- gsm_metadata@header$series_id
experiment_type <- gsm_metadata@header$type
gse_ids <- c(gse_ids, gse_id)
experiment_types <- c(experiment_types, experiment_type)
gsm_list <- c(gsm_list, gsm_id)
}
return(list(gse_ids = unique(gse_ids), experiment_types = experiment_types, gsm_ids = gsm_list))
}
# Apply the function to each cell in the "geo" column
results <- lapply(geo$geo, get_gse_and_experiment_type)
# Split the results into separate lists for GSE IDs, experiment types, and GSM IDs
gse_list <- lapply(results, function(x) x$gse_ids)
experiment_type_list <- lapply(results, function(x) x$experiment_types)
gsm_list <- lapply(results, function(x) x$gsm_ids)
# Replace GSM numbers in the "geo" column with GSE IDs
geo$geo <- sapply(gse_list, function(x) paste(x, collapse = "|"))
# Filter out any NA or empty experiment types
unique_experiment_types <- unique(unlist(experiment_type_list))
unique_experiment_types <- unique_experiment_types[!is.na(unique_experiment_types) & unique_experiment_types != ""]
# Initialize the new columns in the data frame
for (exp_type in unique_experiment_types) {
geo[[exp_type]] <- NA
}
# Fill in the GSM numbers under the respective experiment type columns
for (i in seq_along(geo$geo)) {
exp_types <- experiment_type_list[[i]]
if (!all(is.na(exp_types))) {
for (j in seq_along(exp_types)) {
exp_type <- exp_types[j]
gsm_id <- gsm_list[[i]][j]
if (!is.na(exp_type) && exp_type != "" && !is.na(gsm_id)) {
geo[i, exp_type] <- ifelse(is.na(geo[i, exp_type]), gsm_id, paste(geo[i, exp_type], gsm_id, sep = "|"))
}
}
}
}
# Print the updated data frame
print(geo)
# Sample data frame named 'geo'
geo <- h.cell[ , c("id", "geo")]
# Function to get GSE IDs and Experiment Types from a string of GSM IDs
get_gse_and_experiment_type <- function(gsm_string) {
if (gsm_string == "") {
return(list(gse_ids = NA, experiment_types = NA, gsm_ids = NA))  # Return NA for empty cells
}
gsm_ids <- unlist(strsplit(gsm_string, "|", fixed = TRUE))
gse_ids <- c()
experiment_types <- c()
gsm_list <- c()
for (gsm_id in gsm_ids) {
gsm_metadata <- getGEO(gsm_id, AnnotGPL = FALSE, getGPL = FALSE)
if (is.list(gsm_metadata)) {
gsm_metadata <- gsm_metadata[[1]]
}
# Extract relevant information from the GSM metadata
gse_id <- gsm_metadata@header$series_id
experiment_type <- gsm_metadata@header$type
gse_ids <- c(gse_ids, gse_id)
experiment_types <- c(experiment_types, experiment_type)
gsm_list <- c(gsm_list, gsm_id)
}
return(list(gse_ids = unique(gse_ids), experiment_types = experiment_types, gsm_ids = gsm_list))
}
# Apply the function to each cell in the "geo" column
results <- lapply(geo$geo, get_gse_and_experiment_type)
# Split the results into separate lists for GSE IDs, experiment types, and GSM IDs
gse_list <- lapply(results, function(x) x$gse_ids)
experiment_type_list <- lapply(results, function(x) x$experiment_types)
gsm_list <- lapply(results, function(x) x$gsm_ids)
# Replace GSM numbers in the "geo" column with GSE IDs
geo$geo <- sapply(gse_list, function(x) paste(x, collapse = "|"))
# Filter out any NA or empty experiment types
unique_experiment_types <- unique(unlist(experiment_type_list))
unique_experiment_types <- unique_experiment_types[!is.na(unique_experiment_types) & unique_experiment_types != ""]
# Initialize the new columns in the data frame
for (exp_type in unique_experiment_types) {
geo[[exp_type]] <- NA
}
# Fill in the GSM numbers under the respective experiment type columns
for (i in seq_along(geo$geo)) {
exp_types <- experiment_type_list[[i]]
if (!all(is.na(exp_types))) {
for (j in seq_along(exp_types)) {
exp_type <- exp_types[j]
gsm_id <- gsm_list[[i]][j]
if (!is.na(exp_type) && exp_type != "" && !is.na(gsm_id)) {
geo[i, exp_type] <- ifelse(is.na(geo[i, exp_type]), gsm_id, paste(geo[i, exp_type], gsm_id, sep = "|"))
}
}
}
}
# Print the updated data frame
print(geo)
# Load the required library
library(GEOquery)
# Sample data frame named 'geo'
geo <- data.frame(
id = c("Cell1", "Cell2", "Cell3"),
geo = c("GSM1|GSM2|GSM3", "", "GSM4|GSM5|GSM6"),
stringsAsFactors = FALSE
)
# Function to get Experiment Types from a string of GSM IDs
get_experiment_types <- function(gsm_string) {
if (gsm_string == "") {
return(list(gsm_ids = NA, experiment_types = NA))  # Return NA for empty cells
}
gsm_ids <- unlist(strsplit(gsm_string, "|", fixed = TRUE))
experiment_types <- c()
gsm_list <- c()
for (gsm_id in gsm_ids) {
gsm_metadata <- getGEO(gsm_id, AnnotGPL = FALSE, getGPL = FALSE)
if (is.list(gsm_metadata)) {
gsm_metadata <- gsm_metadata[[1]]
}
# Extract relevant information from the GSM metadata
experiment_type <- gsm_metadata@header$type
experiment_types <- c(experiment_types, experiment_type)
gsm_list <- c(gsm_list, gsm_id)
}
return(list(gsm_ids = gsm_list, experiment_types = experiment_types))
}
# Apply the function to each cell in the "geo" column
results <- lapply(geo$geo, get_experiment_types)
# Split the results into separate lists for GSM IDs and experiment types
gsm_list <- lapply(results, function(x) x$gsm_ids)
experiment_type_list <- lapply(results, function(x) x$experiment_types)
# Filter out any NA or empty experiment types
unique_experiment_types <- unique(unlist(experiment_type_list))
unique_experiment_types <- unique_experiment_types[!is.na(unique_experiment_types) & unique_experiment_types != ""]
# Initialize the new columns in the data frame
for (exp_type in unique_experiment_types) {
geo[[exp_type]] <- NA
}
# Fill in the GSM numbers under the respective experiment type columns
exp_types <- experiment_type_list[[i]]
if (!all(is.na(exp_types
# Function to get Experiment Types from a string of GSM IDs
get_experiment_types <- function(gsm_string) {
# Apply the function to each cell in the "geo" column
results <- lapply(geo$geo, get_experiment_types)
# Split the results into separate lists for GSM IDs and experiment types
gsm_list <- lapply(results, function(x) x$gsm_ids)
experiment_type_list <- lapply(results, function(x) x$experiment_types)
# Filter out any NA or empty experiment types
unique_experiment_types <- unique(unlist(experiment_type_list))
unique_experiment_types <- unique_experiment_types[!is.na(unique_experiment_types) & unique_experiment_types != ""]
# Initialize the new columns in the data frame
for (exp_type in unique_experiment_types) {
geo[[exp_type]] <- NA
}
# Fill in the GSM numbers under the respective experiment type columns
for (i in seq_along(geo$geo)) {
exp_types <- experiment_type_list[[i]]
if (!all(is.na(exp_types))) {
for (j in seq_along(exp_types)) {
exp_type <- exp_types[j]
gsm_id <- gsm_list[[i]][j]
if (!is.na(exp_type) && exp_type != "" && !is.na(gsm_id)) {
geo[i, exp_type] <- ifelse(is.na(geo[i, exp_type]), gsm_id, paste(geo[i, exp_type], gsm_id, sep = "|"))
}
}
}
}
# Remove the "geo" column
geo <- geo[, !(names(geo) %in% c("geo"))]
View(geo)
# Sample data frame named 'geo'
geo <- h.cell[ , c("id", "geo")]
# Function to get Experiment Types from a string of GSM IDs
get_experiment_types <- function(gsm_string) {
if (gsm_string == "") {
return(list(gsm_ids = NA, experiment_types = NA))  # Return NA for empty cells
}
gsm_ids <- unlist(strsplit(gsm_string, "|", fixed = TRUE))
experiment_types <- c()
gsm_list <- c()
for (gsm_id in gsm_ids) {
gsm_metadata <- getGEO(gsm_id, AnnotGPL = FALSE, getGPL = FALSE)
if (is.list(gsm_metadata)) {
gsm_metadata <- gsm_metadata[[1]]
}
# Extract relevant information from the GSM metadata
experiment_type <- gsm_metadata@header$type
experiment_types <- c(experiment_types, experiment_type)
gsm_list <- c(gsm_list, gsm_id)
}
return(list(gsm_ids = gsm_list, experiment_types = experiment_types))
}
# Apply the function to each cell in the "geo" column
results <- lapply(geo$geo, get_experiment_types)
# Function to get Experiment Types from a string of GSM IDs
get_experiment_types <- function(gsm_string) {
if (gsm_string == "") {
return(list(gsm_ids = NA, experiment_types = NA))  # Return NA for empty cells
}
gsm_ids <- unlist(strsplit(gsm_string, "|", fixed = TRUE))
experiment_types <- c()
gsm_list <- c()
for (gsm_id in gsm_ids) {
gsm_metadata <- getGEO(gsm_id, AnnotGPL = FALSE, getGPL = FALSE)
if (is.list(gsm_metadata)) {
gsm_metadata <- gsm_metadata[[1]]
}
# Extract relevant information from the GSM metadata
gse_id <- Meta(gsm_metadata)$series_id
experiment_type <- Meta(gsm_metadata)$type
experiment_types <- c(experiment_types, experiment_type)
gsm_list <- c(gsm_list, gsm_id)
}
return(list(gsm_ids = gsm_list, experiment_types = experiment_types))
}
# Apply the function to each cell in the "geo" column
results <- lapply(geo$geo, get_experiment_types)
for (gsm_id in gsm_ids) {
gsm_metadata <- getGEO(gsm_id, AnnotGPL = FALSE, getGPL = FALSE)
if (is.list(gsm_metadata)) {
gsm_metadata <- gsm_metadata[[1]]
}
# Extract relevant information from the GSM metadata
gse_id <- Meta(gsm_metadata)$series_id
experiment_type <- pData(phenoData(gsm_metadata))$type[1]
experiment_types <- c(experiment_types, experiment_type)
gsm_list <- c(gsm_list, gsm_id)
}
# Sample data frame named 'geo'
geo <- data.frame(
id = c("Cell1", "Cell2", "Cell3"),
geo = c("GSM1|GSM2|GSM3", "", "GSM4|GSM5|GSM6"),
stringsAsFactors = FALSE
)
# Function to get Experiment Types from a string of GSM IDs
get_experiment_types <- function(gsm_string) {
if (gsm_string == "") {
return(list(gsm_ids = NA, experiment_types = NA))  # Return NA for empty cells
}
gsm_ids <- unlist(strsplit(gsm_string, "|", fixed = TRUE))
experiment_types <- c()
gsm_list <- c()
for (gsm_id in gsm_ids) {
gsm_metadata <- getGEO(gsm_id, AnnotGPL = FALSE, getGPL = FALSE)
if (is.list(gsm_metadata)) {
gsm_metadata <- gsm_metadata[[1]]
}
# Extract relevant information from the GSM metadata
gse_id <- Meta(gsm_metadata)$series_id
experiment_type <- pData(phenoData(gsm_metadata))$type[1]
experiment_types <- c(experiment_types, experiment_type)
gsm_list <- c(gsm_list, gsm_id)
}
return(list(gsm_ids = gsm_list, experiment_types = experiment_types))
}
# Apply the function to each cell in the "geo" column
results <- lapply(geo$geo, get_experiment_types)
# Sample data frame named 'geo'
geo <- h.cell[ , c("id", "geo")]
# Function to get Experiment Types from a string of GSM IDs
get_experiment_types <- function(gsm_string) {
if (gsm_string == "") {
return(list(gsm_ids = NA, experiment_types = NA))  # Return NA for empty cells
}
gsm_ids <- unlist(strsplit(gsm_string, "|", fixed = TRUE))
experiment_types <- c()
gsm_list <- c()
for (gsm_id in gsm_ids) {
gsm_metadata <- getGEO(gsm_id, AnnotGPL = FALSE, getGPL = FALSE)
if (is.list(gsm_metadata)) {
gsm_metadata <- gsm_metadata[[1]]
}
# Extract relevant information from the GSM metadata
gse_id <- Meta(gsm_metadata)$series_id
experiment_type <- pData(phenoData(gsm_metadata))$type[1]
experiment_types <- c(experiment_types, experiment_type)
gsm_list <- c(gsm_list, gsm_id)
}
return(list(gsm_ids = gsm_list, experiment_types = experiment_types))
}
# Apply the function to each cell in the "geo" column
results <- lapply(geo$geo, get_experiment_types)

cell_lines <- cell_lines_all(cellosaurus)
View(cellosaurus)
?cell_lines_filter
SCs <- cell_lines_filter(cell_lines,
filter_by = "category",
filter_term = "stem cell",
filter_type = "contains")
hSCs <-cell_lines_filter(cell_lines,
filter_by = "species-accession",
filter_term = "9606",
filter_type = "equals")
hSCs <-cell_lines_filter(SCs,
filter_by = "species-accession",
filter_term = "9606",
filter_type = "equals")
hESCs <- cell_lines_filter(hSCs,
filter_by = "category",
filter_term = "Embryonic stem cell",
filter_type = "equals")
View(hESCs)
head(hESCs)
hSCs <-cell_lines_filter(SCs,
filter_by = "species-accession",
filter_term = "9606",
filter_type = "equals")
hESCs <- cell_lines_filter(hSCs,
filter_by = "category",
filter_term = "Embryonic stem cell",
filter_type = "equals")
iPSCs <- cell_lines_filter(hSCs,
filter_by = "category",
filter_term = "Induced pluripotent stem cell",
filter_type = "equals")
view(hESCs)
View(hESCs)
hESC_list <- select(hESCs, accession)
print(hESCs[, c(1,2)])
print(hESCs[, c(1)])
print(hESCs[1, ])
print(nrow(hESCs))
print(ncol(hESCs))
View(hESCs)
cell_line_accessions(hESCs)
accession <- cell_line_accessions(hESCs)
View(accession)
?cell_line_find_all
SCs <- cell_line_find_all(cellosaurus, "stem cell")
View(accession)
View(cell_lines)
library(rcellosaurus)
cellosaurus <- read_cellosaurus_xml("Desktop/cellosaurus.xml")
cell_lines <- cell_lines_all(cellosaurus)
SCs <- cell_line_find_all(cellosaurus, "stem cell")
h <- cell_line_find_all(cellosaurus, "sapiens")
gc()
h <- cell_line_find_all(cellosaurus, "sapiens")
hSCs <-cell_lines_filter(SCs,
filter_by = "species-accession",
filter_term = "9606",
filter_type = "equals")
SCs <-cell_lines_filter(cell_lines,
filter_by = "species-accession",
filter_term = "9606",
filter_type = "equals")
hSCs <-cell_lines_filter(SCs,
filter_by = "species-accession",
filter_term = "9606",
filter_type = "equals")
hESCs <- cell_lines_filter(hSCs,
filter_by = "category",
filter_term = "Embryonic stem cell",
filter_type = "equals")
iPSCs <- cell_lines_filter(hSCs,
filter_by = "category",
filter_term = "Induced pluripotent stem cell",
filter_type = "equals")
SC <- cell_line_find_all(cellosaurus, "stem cell")
View(SCs)
View(SCs)
SC <- cell_line_find_all(cellosaurus, "stem cell")
cellosaurus <- read_cellosaurus_xml("Desktop/cellosaurus.xml")
cell_lines <- cell_lines_all(cellosaurus)
SC <- cell_line_find_all(cellosaurus, "stem cell")
?cell_line_lists
SC <- cell_line_lists(cell_lines, attrib = NULL, category = "Embryonic stem cell", item_element,
attrib_name, contents = TRUE)
?cell_line_lists
library(rcellosaurus)
SC <- cell_line_lists(cell_lines, attrib = NULL, category = "Embryonic stem cell", item_element,
attrib_name, contents = TRUE)
SC <- cell_line_lists(cell_lines, attrib = NULL)
mice_lines <- cell_line_find_all(cellosaurus, "Homo sapiens")
human <- cell_line_find_all(cellosaurus, "sapiens")
library(rcellosaurus)
cellosaurus <- read_cellosaurus_xml("Desktop/cellosaurus.xml")
human <- cell_line_find_all(cellosaurus, "sapiens")
cell_lines <- cell_lines_all(cellosaurus)
cell_lines <- cell_lines_all(cellosaurus)
cell_lines <- cell_lines_all(cellosaurus)
cell_lines <- cell_lines_all(cellosaurus)
human <- cell_line_find_all(cell_lines, "sapiens")
hSC <- cell_line_find_all(human, "stem cell")
View(hSC)
human <- cell_line_find_all(cell_lines, "Homo sapiens")
ESC <- cell_line_find_all(human, "Embryonic stem cell")
View(ESC)
View(cellosaurus)
cell_list <- ESC[1:5]
cell_list <- ESC[1:2]
View(cell_list)
View(cellosaurus)
View(cell_list)
View(cell_lines)
View(cell_lines)
View(ESC)
cell_list <- ESC[,1:2]
cell_list <- ESC[[ ,1:9]]
cell_list <- ESC[[ ,c(1:9)]]
?rm
rm(cell_list)
ESC <- cell_line_find_all(human, "Embryonic stem cell")
hSCs <-cell_lines_filter(SCs,
filter_by = "species-accession",
filter_term = "9606",
filter_type = "equals")
ESC <- cell_line_find_all(human, "Embryonic stem cell")
#Filter cell-lines based on criteria
SCs <-cell_lines_filter(cell_lines,
filter_by = "category",
filter_term = "stem cell",
filter_type = "contains")
hSCs <-cell_lines_filter(SCs,
filter_by = "species-accession",
filter_term = "9606",
filter_type = "equals")
hESCs <- cell_lines_filter(hSCs,
filter_by = "category",
filter_term = "Embryonic stem cell",
filter_type = "equals")
iPSCs <- cell_lines_filter(hSCs,
filter_by = "category",
filter_term = "Induced pluripotent stem cell",
filter_type = "equals")
View(hSC)
rm(ESC)
hESC <- cell_line_find_all(human, "Embryonic stem cell")
iPSC <- cell_line_find_all(human, "Induced pluripotent stem cell")
View(hESC)
#extract data
library(xml2)
library(dplyr)
extract_attribute <- function(xml_element) {
attribute <- xml_element %>% xml_attr(target_attribute)
return(attribute)
}
View(extract_attribute)
# Apply the function to each element in the data frame and store the results in a new column
list <- sapply(xml_data_frame$xml_column, extract_attribute)
# Apply the function to each element in the data frame and store the results in a new column
list <- sapply(hESC$xml_column, extract_attribute)
# Apply the function to each element in the data frame and store the results in a new column
list <- sapply(hESC[ ,1:5], extract_attribute)
# Apply the function to each element in the data frame and store the results in a new column
list <- sapply(hESC[ ,], extract_attribute)
# Apply the function to each element in the data frame and store the results in a new column
list <- sapply(hESC, extract_attribute)
# Apply the function to each element in the data frame and store the results in a new column
list <- sapply(hESC, extract_attribute)
View(extract_attribute)
# Create a function to extract the specific attribute from each XML element
extract_attribute <- function(xml_element) {
attributes_list <- xml_attrs(xml_element)
return(attributes_list)
}
# Create a function to extract the specific attribute from each XML element
extract_attribute <- function(xml_element) {
attributes_list <- xml_attrs(xml_element)
return(attributes_list)
}
# Apply the function to each element in the data frame and store the results in a new column
aattributes_list <- lapply(xml_data_frame, function(column) {
lapply(column, extract_attributes)
})
# Apply the function to each element in the data frame and store the results in a new column
aattributes_list <- lapply(hESC, function(column) {
lapply(column, extract_attributes)
})
rm(extract_attribute())
rm(extract_attribute)
# Create a function to extract the specific attribute from each XML element
extract_attributes <- function(xml_element) {
attributes_list <- xml_attrs(xml_element)
return(attributes_list)
}
# Apply the function to each element in the data frame and store the results in a new column
attributes_list <- lapply(hESC, function(column) {
lapply(column, extract_attributes)
})
# Create a function to extract the specific attribute from each XML element
extract_attributes <- function(xml_element) {
if (xml_is(xml_element, "list")) {
attributes_list <- xml_attrs(xml_element)
return(attributes_list)
} else {
return(NULL)
}
}
# Apply the function to each element in the data frame and store the results in a new column
attributes_list <- lapply(xml_data_frame, function(column) {
lapply(column, function(xml_element) {
extract_attributes(xml_element)
})
})
# Apply the function to each element in the data frame and store the results in a new column
attributes_list <- lapply(ESC, function(column) {
lapply(column, function(xml_element) {
extract_attributes(xml_element)
})
})
# Apply the function to each element in the data frame and store the results in a new column
attributes_list <- lapply(hESC, function(column) {
lapply(column, function(xml_element) {
extract_attributes(xml_element)
})
})
# Create a function to extract the specific attribute from each XML element
extract_attributes <- function(xml_element) {
tryCatch({
attributes_list <- xml_attrs(xml_element)
return(attributes_list)
}, error = function(e) {
return(NULL)
})
}
# Apply the function to each element in the data frame and store the results in a new column
attributes_list <- lapply(hESC, function(column) {
lapply(column, function(xml_element) {
extract_attributes(xml_element)
})
})
View(attributes_list)
for(i in 1:3){
write.csv(hESC[i], paste0(names(hESC)[i], "_ESC.csv"))
}
sapply(1:3, function(i) write.csv(hESC[[i]], sprintf("x%i_ESC.csv",i)))
str(hESC)
View(hESC)
extracted_columns <- lapply(hESC, function(df) df[[column_name]])
extracted_columns <- lapply(hESC, function(df) df[, 1:9])
col-range <- 1:9
extracted_columns <- lapply(hESC, function(df) hESC[, 1:9])
extracted_columns <- lapply(hESC, function(df) hESC[, col-range])
extracted_columns <- lapply(hESC, function(df) df[, col_range])
extracted_columns <- lapply(hESC, function(df) df[, col-range])
col-range <- 1:9
extracted_columns <- lapply(hESC, function(df) df[, col-range])
extracted_columns <- lapply(hESC, function(df) df[, col_range, drop = FALSE])
extracted_columns <- lapply(hESC, function(df) df[, col-range, drop = FALSE])
extracted_columns <- lapply(hESC, function(df) df[, 1:9, drop = FALSE])
extracted_columns <- lapply(hESC, function(df) df[, 1:3, drop = FALSE])
col_range <- 1:9
extracted_columns <- lapply(hESC, function(df) df[, col_range, drop = FALSE])
col_range <- paste0("V", 1:9)
extracted_columns <- lapply(hESC, function(df) df[, col_range, drop = FALSE])
rm(col_range)
rm(i)
rm(col)
rm(extract_attributes())
rm(extract_attributes)
rm(list)
rm(list)
rm(iPSC)
iPSC <- cell_line_find_all(human, "Induced pluripotent stem cell")
iPSC <- cell_line_find_all(human, "pluripotent stem cell")
list <- c("accession-list", "name-list", "web-page-list", "cell-type")
result = lapply(hESC, "[", , list)
# Extract data
library(xml2)
result = lapply(hESC, "[", , list)
library(dplyr)
result <- lapply(hESC, "[", , list)
new_list <- lapply(hESC, function(x) x%>% select(accession-list))
new_list <- lapply(hESC, function(x) x%>% select("accession-list"))
list <- hESC[[1:9]][[1:4000]]
list <- hESC[[1]][[1:4]]
list <- hESC[[1]][1:4]
View(list)
rm(list)
View(hESC)
list[i] <- hESC[[7]][[i]][["name"]][["accession"]]
list <- vector()
for (i in 1:nrow(hESC)) {
list[i] <- hESC[[7]][[i]][["name"]][["accession"]]
}
for (i in 1:nrow(hESC)) {
list[i] <- hESC[[7]][[i]][["name"]][["accession"]]
}
install.packages("xml2")
library(xml2)
cellosaurus <- read_cellosaurus_xml("Desktop/cellosaurus.xml")
library(XML)
install.packages("XML")
library(XML)
hESC_xml <- xmlParse(hESC)
hESC_xml <- xmlParse(cellosaurus), head
xml <- xmlParse(cellosaurus)
head(xml)
rm(attributes_list)
head(xml)
xml_text(xml_find_all(xml, ".//label"))
xml_text(xml_find_all(xml, ".//label"))
xml_text(xml_find_all(cellosaurus, ".//label"))
rm(xml)
View(cellosaurus)
View(cell_lines)
cell_type <- xml_text(xml_find_all(cell_lines, ".//label"))
View(cell_lines)
View(hESC)
cell_type <- xml_text(xml_find_all(hESC, ".//label"))
library(tibble)
list <- tibble(name = cell_type)
View(list)
name <- xml_text(xml_find_all(hESC, ".//name"))
head((hESCs)
Q
list <- tibble(name = name, accession = accession)
accession <-  xml_text(xml_find_all(hESC, ".//accession"))
name <- xml_text(xml_find_all(hESC, ".//name"))
list <- tibble(name = name, accession = accession)
name <- xml_text(xml_find_all(hESC, ".//name-list"))
list <- tibble(name = name, accession = accession)
name <- xml_text(xml_find_all(hESC, ".//name-list"))
accession <-  xml_text(xml_find_all(hESC, ".//accession"))
list <- tibble(name = name, accession = accession)
name <- xml_text(xml_find_all(hESCs, ".//name-list"))
accession <-  xml_text(xml_find_all(hESCs, ".//accession"))
list <- tibble(name = name, accession = accession)
name <- xml_text(xml_find_all(hESC, ".//identifier"))
list <- tibble(name = name, accession = accession)
name <- xml_text(xml_find_all(hESC, ".//name-list"))
# Exporting the stem cell table
name <- xml_text(xml_find_all(hESC, ".//name-list"))
accession <-  xml_text(xml_find_all(hESC, ".//accession"))
ref <- xml_text(xml_find_all(hESC, ".//reference"))
accession <-  xml_text(xml_find_all(hESC, ".//accession-list"))
list <- tibble(name = name, accession = accession)
View(list)
derived_from <- xml_text(xml_find_all(hESC, ".//derived_from"))
url <- xml_text(xml_find_all(hESC, ".//web-page-list"))
list <- tibble(name = name, accession = accession, url = url)
list <- tibble(name = name, accession = accession)
View(list)
# Exporting the stem cell table
name <- xml_text(xml_find_all(hESC, ".//identifier"))
# Exporting the stem cell table
name <- xml_text(xml_find_all(hESC, ".//name type="identifier""))
# Exporting the stem cell table
name <- xml_text(xml_find_all(hESC, ".//name type=identifier"))
# Exporting the stem cell table
name <- xml_text(xml_find_all(hESC, ".//identifier"))
namelist <-xml_text(xml_find_all(hESC, ".//name-list"))
list <- tibble(name = namelist, accession = accession)
View(list)
list <- tibble(namelist = namelist, accession = accession)
View(list)
# Exporting the stem cell table
name <- xml_text(xml_find_all(hESC, ".//name type="synonym""))
?xml_find_all.xml_nodeset
name <- xml_children(hESC)
head(name)
subname <- xml_children(name)
head(subname)
?xml_siblings
subsubname <- xml_siblings(xml_children(subname)[[1]])
View(subsubname)
identifier <- name type="identifier"
identifier <- "name type="identifier""
identifier <- 'name type="identifier"'
synonym <- 'name type="synonym"'
# Exporting the stem cell table
name <- xml_text(xml_find_all(hESC, ".//identifier"))
# Exporting the stem cell table
i <- 'name type="identifier"'
s <- 'name type="synonym"'
name <- xml_text(xml_find_all(hESC, ".//i"))
namelist <-xml_text(xml_find_all(hESC, ".//name-list"))
accession <- xml_text(xml_find_all(hESC, ".//accession-list"))
list <- tibble(namelist = namelist, accession = accession)
View(hESC)
name_id <- xml_text(xml_find_all(hESC, './/name type="identifier"'))
read_xml(hESC)
library(xml2)
xml <- read_xml(hESC)
library(XML)
xml <- xmlParse(hESC)
xml <- xmlParse(cellosaurus)
table <- xmlToDataFrame(xml)
xml <- xmlParse(cell_lines)
tail(xml)
rm(i)
rm(s)
rm(url)
rm(xml)
rm(subname)
rm(subsubname)
library(filenamer)
library(io)
d <- qread("../rds/cellosaurus.rds");
omics <- qread("../rds/cellosaurus_omics.rds");
library(filenamer)
library(io)
d <- qread("../rds/cellosaurus.rds");
d <- qread("../rds/cellosaurus.rds");
getwd()
d <- qread("..GitHub/cell-lines/rds/cellosaurus.rds");
setwd()
pwd()
setwd("~/GitHub/cell-lines/filter")
d <- qread("../rds/cellosaurus.rds");
omics <- qread("../rds/cellosaurus_omics.rds");
# Filter cell lines that are human species and with GEO data
h.cell <- d[d$species == "NCBI_TaxID=9606; ! Homo sapiens (Human)" &
!is.na(d$geo), c("id", "accession", "synonyms", "category", "disease", "origin", "geo", "encode")]
# Subset omics to keep only the cells present in h.cell
id_omics <- intersect(h.cell$id, row.names(omics))
h.omics <- omics[row.names(omics) %in% id_omics, ]
# Summarise omics
sum <- apply(h.omics, 1, function(x) paste(colnames(h.omics)[x == 1], collapse = "|"))
combined_table <- data.frame(cell = row.names(h.omics), omics = sum, row.names = NULL)
c <- merge(h.cell, combined_table, by = row.names, all.x = TRUE)
View(combined_table)
View(h.cell)
c <- merge(h.cell, combined_table, by = row.names, all.x = TRUE)
View(h.omics)
c <- merge(h.cell, combined_table, by = row.names, all.x = TRUE)
?merge
merged_table <- merge(h.cell, combined_table, by = row.names(h.cell), all = FALSE)
merged_table <- merge(h.cell, combined_table, by = h.cell[-1], all = FALSE)
merged_table <- merge(h.cell, combined_table, by = h.cell[,1], all = FALSE)
sum <- data.frame(cell = row.names(h.omics), omics = sum, row.names = NULL)
View(sum)
# Summarise omics
sum <- apply(h.omics, 1, function(x) paste(colnames(h.omics)[x == 1], collapse = "|")) %>%
data.frame(cell = row.names(h.omics), omics = sum, row.names = NULL)
# Summarise omics
sum <- apply(h.omics, 1, function(x) paste(colnames(h.omics)[x == 1], collapse = "|"))
sum <- data.frame(cell = row.names(h.omics), omics = sum, row.names = NULL)
?data.frame
?cbind
c <- cbind(h.cell, combined_table, by = "id", all.x = TRUE)
c <- cbind(h.cell, combined_table, by = "id", all = FALSE)
sum <- data.frame(id = row.names(h.omics), omics = sum, row.names = NULL)
c <- cbind(h.cell, combined_table, by = "id", all = FALSE)
c <- merge(h.cell, combined_table, by = "id", all = FALSE)
c <- merge(h.cell, combined_table, by = "id", all = FALSE)
View(h.cell)
id_unique_sum <- anti_join(sum, h.cell)
id_unique_sum <- h.cell[!h.cell$id %in% sum$id, ]
View(id_unique_sum)
c <- merge(h.cell, sum, by = "id", all.x = TRUE)
View(c)
d <- qread("../rds/cellosaurus.rds");
omics <- qread("../rds/cellosaurus_omics.rds");
# Filter cell lines that are human species and with GEO data
h.cell <- d[d$species == "NCBI_TaxID=9606; ! Homo sapiens (Human)" &
!is.na(d$geo), c("id", "accession", "synonyms", "category", "disease", "origin", "geo", "encode")]
# Subset omics to keep only the cells present in h.cell
id_omics <- intersect(h.cell$id, row.names(omics))
h.omics <- omics[row.names(omics) %in% id_omics, ]
# Summarise omics
sum <- apply(h.omics, 1, function(x) paste(colnames(h.omics)[x == 1], collapse = "|"))
sum <- data.frame(id = row.names(h.omics), omics = sum, row.names = NULL)
View(sum)
c <- merge(h.cell, sum$omics, by = "id", all.x = TRUE)
c <- merge(h.cell, sum, by = "id", all.x = TRUE)
View(c)
# generate list for each cell line type
subset <- split(h.cell, h.cell$category)
for (category_name in names(subset)) {
category <- gsub(" ", "-", category_name)  # Replace whitespace with underscores
assign(category, subset[[category_name]])  # Assign subset as a new table with the modified name
write.csv(subset[[category_name]], file = paste0(category, ".csv"), row.names = FALSE)  # Export the table as a CSV file
}
# generate list for each cell line type
subset <- split(c, c$category)
for (category_name in names(subset)) {
category <- gsub(" ", "-", category_name)  # Replace whitespace with underscores
assign(category, subset[[category_name]])  # Assign subset as a new table with the modified name
write.csv(subset[[category_name]], file = paste0(category, ".csv"), row.names = FALSE)  # Export the table as a CSV file
}
library(filenamer)
library(io)
d <- qread("../rds/cellosaurus.rds");
omics <- qread("../rds/cellosaurus_omics.rds");
# Filter cell lines that are human species and with GEO data
h.cell <- d[d$species == "NCBI_TaxID=9606; ! Homo sapiens (Human)" &
!is.na(d$geo), c("id", "accession", "synonyms", "category", "disease", "origin", "geo", "encode")]
# Subset omics to keep only the cells present in h.cell
id_omics <- intersect(h.cell$id, row.names(omics))
h.omics <- omics[row.names(omics) %in% id_omics, ]
# Summarise omics
sum <- apply(h.omics, 1, function(x) paste(colnames(h.omics)[x == 1], collapse = "|"))
sum <- data.frame(id = row.names(h.omics), omics = sum, row.names = NULL)
# Combine all information
c <- merge(h.cell, sum, by = "id", all.x = TRUE)
# generate list for each cell line type
subset <- split(c, c$category)
for (category_name in names(subset)) {
category <- gsub(" ", "-", category_name)  # Replace whitespace with underscores
assign(category, subset[[category_name]])  # Assign subset as a new table with the modified name
write.csv(subset[[category_name]], file = paste0(category, ".csv"), row.names = FALSE)  # Export the table as a CSV file
}
